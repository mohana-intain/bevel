##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role setups communication between the vault and kubernetes cluster and install 
# neccessary configurations.
#############################################################################################

# Check if namespace created
- name: "Waiting for the namespace {{ item.name | lower }}-net to be created"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/k8_component"
  vars:
    component_type: "Namespace"
    component_name: "{{ item.name | lower }}-net"
    type: "retry"

###############################################################################################
# This task creates the docker pull credentials for image registry
- name: "Create docker credentials secret"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ item.name | lower}}-net"
    kubernetes: "{{ item.k8s }}"
    check: "docker_credentials"

#############################################################################################
# This task creates secrets for the root token
- name: "Create vault token secret"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ item.name | lower}}-net"
    vault: "{{ item.vault }}"
    kubernetes: "{{ item.k8s }}"
    check: "token_secret"

#############################################################################################
# This tasks gets the kubernetes server url
- name: Get the kubernetes server url
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " "
  register: kubernetes_server_url


- name: "Creating the build directory"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    path: "./build"
    check: "ensure_dir"


# This task checks if the vault path already exists
- name: "Checking if the vault path already exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    check: "vault_auth"

- name: "Set Variable"
  set_fact:
    auth_list: "{{ auth_lists }}"

# Set vault_auth_status variable to false initially
- set_fact:
    vault_auth_status: false
    component_auth_temp: "\"{{ auth_path }}/\""

# Set vault_auth_status variable to true if found
- set_fact:
    vault_auth_status: true
  loop: "{{ auth_lists.stdout_lines }}"
  loop_control:
    loop_var: itemx
  when: itemx == component_auth_temp

############################################################################################
# This task enables the path for the organizations and orderers on vault
# This task runs only when {{auth_path}} is not already created
- name: Enable and configure Kubernetes-auth for Organization
  shell: |
    vault auth enable --path="{{ auth_path }}" kubernetes
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: not vault_auth_status  # Only when auth_path is NOT in the output of auth_list
  ignore_errors: yes

############################################################################################
# This task get the certificate for the cluster mentioned in k8 secret
# This task runs only when {{auth_path}} is not already created
- name: Get Kubernetes cert files for organizations
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl -n {{ component_name }} get secrets $(KUBECONFIG={{ kubernetes.config_file }} kubectl -n {{ component_name }} get secrets | grep "default" | awk '{print $1}') -o jsonpath="{.data['ca\.crt']}" | base64 -d > "./build/{{ component_name }}.ca.cert"
  when: not vault_auth_status

#####################################################################################################################
# This task writes the Service Account token to the vault for Organisations
# This task runs only when {{auth_path}} is not already created
- name: Write reviewer token for Organisations
  shell: |
    export REVIEWER_TOKEN=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get secret $(KUBECONFIG={{ kubernetes.config_file }} kubectl get serviceaccount -n {{ component_name }} vault-reviewer -o jsonpath={.secrets[0].name}) -n {{ component_name }} -o  jsonpath={.data.token} | base64 -d)
    vault write auth/{{ auth_path }}/config token_reviewer_jwt="$REVIEWER_TOKEN" kubernetes_host=$(KUBECONFIG={{ kubernetes.config_file }} kubectl config view -o jsonpath="{.clusters[?(@.name==\"{{ kubernetes.context }}\")].cluster.server}") kubernetes_ca_cert=@"./build/{{ component_name }}.ca.cert"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: not vault_auth_status

# This task checks if the vault-ro polict already exists
- name: "Checking if the vault policies already exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    check: "vault_policies"
  register: vault_policy_result
  ignore_errors: yes

#####################################################################################################################
# This task creates the access policy for orderers
- name: Create policy for Orderer Access Control
  template:
    src: "orderer-ro.tpl"
    dest: "./build/vault-crypto-{{ component_name | lower }}-ro.hcl"
  vars:
    component_name: "{{ component_name }}"
    vault_secret_path: "{{ vault.secret_path | default('secretsv2') }}"
  when: component_type == 'orderer' and vault_policy_result.failed == True  # Run if policy check failed


############################################################################################
# These tasks creates the access policy for Organizations
- name: Create policy for Organisations Access Control
  template:
    src: "peer-ro.tpl"
    dest: "./build/vault-crypto-{{ component_name | lower }}-ro.hcl"
  vars:
    component_name: "{{ component_name }}"
    vault_secret_path: "{{ vault.secret_path | default('secretsv2') }}"
  when: component_type == 'peer' and vault_policy_result.failed == True   # Run if policy check failed


############################################################################################
# This task writes the policies to the vault
- name: Write Policy to Vault
  shell: |
    vault write sys/policy/vault-crypto-{{ component_type }}-{{ component_name }}-ro policy="@./build/vault-crypto-{{ component_name | lower }}-ro.hcl"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_policy_result.failed == True    # Run if policy check failed

# This task creates the vault auth
- name: Create Vault auth role
  shell: |
    vault write auth/{{ auth_path }}/role/vault-role bound_service_account_names=vault-auth bound_service_account_namespaces={{ component_name }} policies="vault-crypto-{{ component_type }}-{{ component_name }}-ro" ttl=1200s
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: not vault_auth_status     # Run when auth_path is not found

#####################################################################################################################
# # This tasks generate vault_kubernetes helmrelease file
# - name: "Create value file for vault_kubernetes "
#   include_role:
#     name: helm_component
#   vars: 
#     name: "{{ item.name | lower }}"   
#     type: "vault_kubernetes_job"    
#     component_name: "{{ item.name | lower }}-vaultkubernetes-job"
#     component_type: "{{ item.type | lower }}"
#     component_ns: "{{ item.name | lower }}-net"
#     git_protocol: "{{ item.gitops.git_protocol }}"
#     git_url: "{{ item.gitops.git_url }}"
#     git_branch: "{{ item.gitops.branch }}"
#     charts_dir: "{{ item.gitops.chart_source }}"
#     vault: "{{ item.vault }}"
#     k8s: "{{ item.k8s }}"
#     kubernetes_url: "{{ kubernetes_server_url.stdout }}"
#     alpine_image: "{{ network.docker.url }}/alpine-utils:1.0"
#     values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
  
#Git Push : Pushes the above generated files to git directory 
# - name: Git Push
#   include_role: 
#     name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
#   vars:
#     GIT_DIR: "{{ playbook_dir }}/../../../"
#     gitops: "{{ item.gitops }}"    
#     GIT_RESET_PATH: "platforms/hyperledger-fabric/configuration"
#     msg: "[ci skip] Pushing vault_kubernetes files"
   
# # Check if vault_kubernetes is completed
# - name: Check if vault_kubernetes job is completed
#   include_role:
#     name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
#   vars:
#     component_type: Job
#     namespace: "{{ item.name | lower}}-net"
#     component_name: "{{ item.name | lower}}-vaultkubenertes-job"
#     kubernetes: "{{ item.k8s }}"

#############################################################################################
# # This task deletes the root token
# - name: "Delete vault token secret"
#   include_role:
#     name: delete/k8s_secrets
#   vars: 
#     namespace: "{{ item.name | lower}}-net"
#     vault: "{{ item.vault }}"
#     kubernetes: "{{ item.k8s }}"
#     check: "token_secret"
